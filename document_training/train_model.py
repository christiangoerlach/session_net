import requests
import json
import os
from datetime import datetime
from dotenv import load_dotenv

# Lade Umgebungsvariablen
load_dotenv('../config.env')

class DocumentModelTrainer:
    def __init__(self):
        self.endpoint = os.getenv('DOCUMENTINTELLIGENCE_ENDPOINT')
        self.api_key = os.getenv('DOCUMENTINTELLIGENCE_API_KEY')
        self.blob_sas_url = os.getenv('BLOBSASURL')
        
        if not self.endpoint or not self.api_key:
            raise ValueError("Document Intelligence Endpoint und API Key m√ºssen in config.env gesetzt werden")
        
        if not self.blob_sas_url:
            # Fallback: Kombiniere Container URL und SAS Token
            blob_container_url = os.getenv('BLOBCONTAINERURL')
            blob_sas_token = os.getenv('BLOBSASTOKEN')
            
            if blob_container_url and blob_sas_token:
                self.blob_sas_url = f"{blob_container_url}?{blob_sas_token}"
            else:
                # Verwende feste Werte als Fallback
                blob_container_url = "https://sessionnetblob.blob.core.windows.net/containersessionnet"
                blob_sas_token = os.getenv('BLOBSASTOKEN')
                
                if blob_sas_token:
                    self.blob_sas_url = f"{blob_container_url}?{blob_sas_token}"
                else:
                    raise ValueError("BLOBSASURL oder BLOBSASTOKEN muss in config.env gesetzt werden")
        
        # Entferne trailing slash falls vorhanden
        self.endpoint = self.endpoint.rstrip('/')
        self.blob_url = self.blob_sas_url
        
    def train_custom_model(self, model_id, container_url=None, description=None, build_mode="template"):
        """
        Trainiert ein benutzerdefiniertes Document Intelligence Modell
        
        Args:
            model_id (str): Eindeutige ID f√ºr das Modell
            container_url (str): Azure Blob Storage Container URL mit SAS Token (optional, verwendet config.env wenn nicht angegeben)
            description (str): Beschreibung des Modells
            build_mode (str): "template" oder "neural" (Standard: template)
        
        Returns:
            dict: Antwort vom Azure Service
        """
        
        # Verwende Blob URL aus config.env falls nicht angegeben
        if not container_url:
            container_url = self.blob_url
        
        # API Endpoint f√ºr Modell-Training (Region: eastus)
        api_url = f"{self.endpoint}/documentIntelligence/documentModels:build?api-version=2024-02-29-preview"
        
        # Request Body
        request_body = {
            "modelId": model_id,
            "buildMode": build_mode,
            "azureBlobSource": {
                "containerUrl": container_url
            }
        }
        
        # F√ºge Beschreibung hinzu falls vorhanden
        if description:
            request_body["description"] = description
        
        # Headers
        headers = {
            "Content-Type": "application/json",
            "Ocp-Apim-Subscription-Key": self.api_key
        }
        
        print(f"üöÄ Starte Training f√ºr Modell: {model_id}")
        print(f"üì¶ Container URL: {container_url}")
        print(f"üîß Build Mode: {build_mode}")
        print(f"üìù Beschreibung: {description or 'Keine'}")
        print(f"üåê API Endpoint: {api_url}")
        
        # √úberpr√ºfe ob SAS Token in der URL ist
        if "?" in container_url and "sv=" in container_url:
            print("‚úÖ SAS Token in Blob URL erkannt")
        else:
            print("‚ö†Ô∏è  WARNUNG: Blob Container URL scheint keinen SAS Token zu enthalten!")
            print("   Stellen Sie sicher, dass die URL ein SAS Token enth√§lt (z.B. ?sv=...)")
        
        # Debug: Zeige die vollst√§ndige Request-URL
        print(f"üîç Debug: Vollst√§ndige Request-URL: {api_url}")
        print(f"üîç Debug: Request Body: {json.dumps(request_body, indent=2)}")
        
        try:
            # Sende POST Request
            response = requests.post(
                api_url,
                headers=headers,
                json=request_body,
                timeout=30
            )
            
            print(f"\nüìä Response Status: {response.status_code}")
            
            if response.status_code == 202:
                print("‚úÖ Training erfolgreich gestartet!")
                print("‚è≥ Das Training l√§uft im Hintergrund...")
                
                # Speichere Response f√ºr sp√§teren Abruf
                response_data = response.json()
                self._save_training_info(model_id, response_data)
                
                return {
                    "success": True,
                    "status_code": response.status_code,
                    "message": "Training erfolgreich gestartet",
                    "response": response_data
                }
                
            elif response.status_code == 400:
                print("‚ùå Fehler: Ung√ºltige Anfrage")
                error_detail = response.json() if response.content else "Keine Details verf√ºgbar"
                print(f"Fehlerdetails: {error_detail}")
                return {
                    "success": False,
                    "status_code": response.status_code,
                    "error": "Bad Request",
                    "details": error_detail
                }
                
            elif response.status_code == 401:
                print("‚ùå Fehler: Unauthorized - API Key ung√ºltig")
                return {
                    "success": False,
                    "status_code": response.status_code,
                    "error": "Unauthorized - API Key ung√ºltig"
                }
                
            elif response.status_code == 404:
                print("‚ùå Fehler: Resource not found (404)")
                print("   M√∂gliche Ursachen:")
                print("   - Blob Container URL ist falsch oder nicht erreichbar")
                print("   - SAS Token fehlt oder ist abgelaufen")
                print("   - Container existiert nicht")
                print("   - Endpoint URL ist falsch")
                error_detail = response.json() if response.content else "Keine Details verf√ºgbar"
                return {
                    "success": False,
                    "status_code": response.status_code,
                    "error": "Resource not found (404)",
                    "details": error_detail,
                    "suggestions": [
                        "√úberpr√ºfen Sie die Blob Container URL",
                        "Stellen Sie sicher, dass ein g√ºltiger SAS Token vorhanden ist",
                        "√úberpr√ºfen Sie den Document Intelligence Endpoint"
                    ]
                }
                
            else:
                print(f"‚ùå Unerwarteter Fehler: {response.status_code}")
                print(f"Response: {response.text}")
                return {
                    "success": False,
                    "status_code": response.status_code,
                    "error": "Unerwarteter Fehler",
                    "response": response.text
                }
                
        except requests.exceptions.Timeout:
            print("‚ùå Timeout: Request dauerte zu lange")
            return {
                "success": False,
                "error": "Timeout - Request dauerte zu lange"
            }
            
        except requests.exceptions.ConnectionError:
            print("‚ùå Verbindungsfehler: Endpoint nicht erreichbar")
            return {
                "success": False,
                "error": "Verbindungsfehler - Endpoint nicht erreichbar"
            }
            
        except Exception as e:
            print(f"‚ùå Unerwarteter Fehler: {e}")
            return {
                "success": False,
                "error": f"Unerwarteter Fehler: {e}"
            }
    
    def get_model_status(self, model_id):
        """
        Ruft den aktuellen Status eines trainierten Modells ab
        
        Args:
            model_id (str): ID des Modells
            
        Returns:
            dict: Modell-Status und Details
        """
        
        api_url = f"{self.endpoint}/documentIntelligence/documentModels/{model_id}?api-version=2024-02-29-preview"
        
        headers = {
            "Ocp-Apim-Subscription-Key": self.api_key
        }
        
        try:
            response = requests.get(api_url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                model_info = response.json()
                print(f"‚úÖ Modell '{model_id}' Status abgerufen")
                return {
                    "success": True,
                    "model_info": model_info
                }
            else:
                print(f"‚ùå Fehler beim Abrufen des Modell-Status: {response.status_code}")
                return {
                    "success": False,
                    "status_code": response.status_code,
                    "error": response.text
                }
                
        except Exception as e:
            print(f"‚ùå Fehler beim Abrufen des Modell-Status: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def list_models(self):
        """
        Listet alle verf√ºgbaren Modelle auf
        
        Returns:
            dict: Liste aller Modelle
        """
        
        api_url = f"{self.endpoint}/documentIntelligence/documentModels?api-version=2024-02-29-preview"
        
        headers = {
            "Ocp-Apim-Subscription-Key": self.api_key
        }
        
        try:
            response = requests.get(api_url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                models = response.json()
                print(f"‚úÖ {len(models.get('value', []))} Modelle gefunden")
                return {
                    "success": True,
                    "models": models
                }
            else:
                print(f"‚ùå Fehler beim Auflisten der Modelle: {response.status_code}")
                return {
                    "success": False,
                    "status_code": response.status_code,
                    "error": response.text
                }
                
        except Exception as e:
            print(f"‚ùå Fehler beim Auflisten der Modelle: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def train_with_config_blob(self, model_id, description=None, build_mode="template"):
        """
        Trainiert ein Modell mit der Blob URL aus config.env
        
        Args:
            model_id (str): Eindeutige ID f√ºr das Modell
            description (str): Beschreibung des Modells
            build_mode (str): "template" oder "neural" (Standard: template)
        
        Returns:
            dict: Antwort vom Azure Service
        """
        return self.train_custom_model(
            model_id=model_id,
            container_url=self.blob_url,
            description=description,
            build_mode=build_mode
        )
    
    def _save_training_info(self, model_id, response_data):
        """Speichert Training-Informationen f√ºr sp√§teren Abruf"""
        
        training_info = {
            "model_id": model_id,
            "training_started": datetime.now().isoformat(),
            "response": response_data
        }
        
        filename = f"{model_id}_training_info.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(training_info, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ Training-Info gespeichert in: {filename}")


def main():
    """Hauptfunktion f√ºr interaktive Nutzung"""
    
    print("ü§ñ Azure Document Intelligence - Modell Training")
    print("=" * 50)
    
    try:
        trainer = DocumentModelTrainer()
        
        print("\nüìã Verf√ºgbare Aktionen:")
        print("1. Schnell-Training (mit Blob URL aus config.env)")
        print("2. Modell-Status abrufen")
        print("3. Alle Modelle auflisten")
        print("4. Beenden")
        
        while True:
            choice = input("\nüéØ W√§hlen Sie eine Aktion (1-4): ").strip()
            
            if choice == "1":
                print("\n‚ö° Schnell-Training mit config.env Blob URL:")
                
                model_id = input("üìù Modell-ID: ").strip()
                if not model_id:
                    print("‚ùå Modell-ID ist erforderlich!")
                    continue
                
                description = input("üìÑ Beschreibung (optional): ").strip()
                if not description:
                    description = f"Modell f√ºr {model_id} - trainiert am {datetime.now().strftime('%Y-%m-%d %H:%M')}"
                
                build_mode = input("üîß Build Mode (template/neural, Standard: template): ").strip()
                if not build_mode:
                    build_mode = "template"
                
                print(f"‚úÖ Verwende Blob URL aus config.env: {trainer.blob_url}")
                
                result = trainer.train_with_config_blob(
                    model_id=model_id,
                    description=description,
                    build_mode=build_mode
                )
                
                if result["success"]:
                    print(f"\n‚úÖ Training erfolgreich gestartet f√ºr Modell: {model_id}")
                    print("‚è≥ √úberpr√ºfen Sie den Status sp√§ter mit Option 2")
                else:
                    print(f"\n‚ùå Training fehlgeschlagen: {result.get('error', 'Unbekannter Fehler')}")
                    print("üõë Script wird beendet aufgrund des Fehlers.")
                    break
            
            elif choice == "2":
                print("\nüìä Modell-Status abrufen:")
                
                model_id = input("üìù Modell-ID: ").strip()
                if not model_id:
                    print("‚ùå Modell-ID ist erforderlich!")
                    continue
                
                result = trainer.get_model_status(model_id)
                
                if result["success"]:
                    model_info = result["model_info"]
                    print(f"\n‚úÖ Modell '{model_id}' Details:")
                    print(f"   Status: {model_info.get('status', 'Unbekannt')}")
                    print(f"   Erstellt: {model_info.get('createdDateTime', 'Unbekannt')}")
                    print(f"   Beschreibung: {model_info.get('description', 'Keine')}")
                else:
                    print(f"\n‚ùå Fehler beim Abrufen des Status: {result.get('error', 'Unbekannter Fehler')}")
            
            elif choice == "3":
                print("\nüìã Alle Modelle auflisten:")
                
                result = trainer.list_models()
                
                if result["success"]:
                    models = result["models"].get("value", [])
                    if models:
                        print(f"\n‚úÖ {len(models)} Modelle gefunden:")
                        for model in models:
                            print(f"   üìù {model.get('modelId', 'Unbekannt')} - Status: {model.get('status', 'Unbekannt')}")
                    else:
                        print("\nüì≠ Keine Modelle gefunden")
                else:
                    print(f"\n‚ùå Fehler beim Auflisten: {result.get('error', 'Unbekannter Fehler')}")
            
            elif choice == "4":
                print("\nüëã Auf Wiedersehen!")
                break
            
            else:
                print("‚ùå Ung√ºltige Auswahl! Bitte w√§hlen Sie 1-4.")
    
    except ValueError as e:
        print(f"‚ùå Konfigurationsfehler: {e}")
        print("\nüîß Bitte √ºberpr√ºfen Sie Ihre config.env Datei:")
        print("   - DOCUMENTINTELLIGENCE_ENDPOINT")
        print("   - DOCUMENTINTELLIGENCE_API_KEY")
        print("   - BLOBSASURL")
    
    except KeyboardInterrupt:
        print("\n\nüëã Training abgebrochen!")
    
    except Exception as e:
        print(f"\n‚ùå Unerwarteter Fehler: {e}")


if __name__ == "__main__":
    main()